<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NDoc.Documenter.LinearHtml</name>
    </assembly>
    <members>
        <member name="T:NDoc.Documenter.LinearHtml.LhExternalHtmlProvider">
            <summary>
            Used as an extension object to the xslt processor to allow
            retrieving user-provided raw html.
            </summary>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LhExternalHtmlProvider.#ctor(NDoc.Documenter.LinearHtml.LinearHtmlDocumenterConfig,System.String)">
            <summary>
            Contructor.
            </summary>
            <param name="config">LinearHtmlDocumenterConfig from which the property values can be retrieved.</param>
            <param name="fileName">Name of the HTML file that is currently being generated by the xslt processor.</param>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LhExternalHtmlProvider.GetHeaderHtml(System.String)">
            <summary>
            Retrieves user-provided raw html to use as page headers.
            </summary>
            <param name="topicTitle">The title of the current topic.</param>
            <returns></returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LhExternalHtmlProvider.GetFooterHtml(System.String,System.String,System.String)">
            <summary>
            Retrieves user-provided raw html to use as page footers.
            </summary>
            <param name="assemblyName">The name of the assembly for the current topic.</param>
            <param name="assemblyVersion">The version of the assembly for the current topic.</param>
            <param name="topicTitle">The title of the current topic.</param>
            <returns></returns>
        </member>
        <member name="T:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter">
            <summary>
            This creates a linear (serial, more printable) html file from an ndoc xml file. 
            This was designed and implemented with the intention that the html will be
            inserted into a Word document, but this could be useful for other scenarios.
            </summary>
            <remarks>
            <para><pre>
            The document produced is organized as follows:
               Namespaces List: a section listing namespaces and which assembly 
                  they're from, and optionally their namespace summaries.
               Namespace: a section for each namespace
            		Types List: a list of classes, interfaces, etc in the 
            		    namespace, with their summaries.
            		Type: Classes
            		Type: Interfaces
            		Type: Enumerations
            		Type: Structs
            		Type: Delegates
            </pre></para>
            <para>
            This class uses C#'s xml processing capabilities rather than xslt.
            This was more or less an experiment, and I'm not sure whether this
            is better than an xslt implementation or not.  The complexity might
            be similar, but I expect this implementation to be many times faster
            than an equivalent xslt implementation.
            </para>
            <para>
            This class writes a single linear html file, but traverses the xml
            document pretty much just once.  To do this, multiple XmlTextWriters
            are create such that they can be written to in any order.  Then at
            the end the memory buffers written by each text writer are copied
            to the output file in the appropriate order.
            </para> 
            <para>This has a Main for easier and faster test runs outside of NDoc.</para>
            </remarks>
        </member>
        <member name="F:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.xPathNavigator">
            <summary>The main navigator which keeps track of where we
            are in the document.</summary>
        </member>
        <member name="F:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.namespaceListWriter">
            <summary>Writer for the first section, the namespace list.</summary>
        </member>
        <member name="F:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.namespaceWriters">
            <summary>A hashtable from namespace name to Hashtables which
            go from section name (Classes, Interfaces, etc) to XmlTextWriters
            for that section.</summary>
        </member>
        <member name="F:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.namespaceSections">
            <summary>Hashtable from xml node name to section name. For example
            class to Classes.</summary>
        </member>
        <member name="F:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.orderedNamespaceSections">
            <summary>
            The namespace sections in the order they will be emitted.
            </summary>
        </member>
        <member name="F:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.orderedMemberTypes">
            <summary>
            A list of Type (class, interface) member types, to specify
            the order in which they should be rendered.
            </summary>
        </member>
        <member name="F:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.typeTransform">
            <summary>This transform can be used for each type. This is incomplete.</summary>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.Clear">
            <summary>See <see cref="T:NDoc.Core.IDocumenter"/>.</summary>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.Load(System.String)">
            <summary>
            Load the specified NDoc Xml file into this object's memory.
            This is useful when this class is used outside of the context of NDoc.
            </summary>
            <param name="fileName">The NDoc Xml file to load.</param>
            <returns>bool - always true</returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.Load(System.IO.Stream)">
            <summary>
            Load the specified NDoc Xml into this object's memory.
            This is useful when this class is used outside of the context of NDoc.
            </summary>
            <param name="s">The stream to load.</param>
            <returns>bool - always true</returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.CanBuild(NDoc.Core.Project,System.Boolean)">
            <summary>See <see cref="T:NDoc.Core.IDocumenter"/>.</summary>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.Build(NDoc.Core.Project)">
            <summary>See <see cref="T:NDoc.Core.IDocumenter"/>.</summary>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.StartWriters">
            <summary>
            Setup any text writers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.EndWriters">
            <summary>
            Do whatever is neccesary to any writers before emitting html.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.DeleteWriters">
            <summary>
            Close all writers.  They need to be re-created for the next build.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.StartNamespaceSectionWriter(System.String,System.String)">
            <summary>
            Create a namespace section writer if one doesn't already exist
            for the specified namespace and section.
            </summary>
            <param name="namespaceName">C# namespace name, not xml namespace.</param>
            <param name="sectionName">The section name, such as Classes.</param>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.ToSimpleType(System.String)">
            <summary>
            Convert a full type name like System.Int32 to the more simple version
            "int".
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.ToAccessDeclaration(System.String)">
            <summary>
            Convert an access string as in the xml (Public, Family, etc) to
            one like we want for declarations (public, protected, etc).
            </summary>
            <param name="typeAccess"></param>
            <returns></returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.TypeBaseName(System.String)">
            <summary>
            Return the base of the input type name.  For example the base of 
            System.String is String.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.GetChildren(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Get the children of the current node which have the specified
            localName.  
            </summary>
            <remarks>
            This is motivated by the fact that XPathNavigator.SelectChildren()
            apparently looks at all descendants.
            </remarks>
            <param name="localName">The localname to select.</param>
            <param name="nav">The XPathNavigator.</param>
            <returns>A new ArrayList of XPathNavigators.</returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.GetDescendants(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Get the descendants of the current node which have the specified
            localName.  This just provides a different iteration style
            from XPathNavigator.SelectDescendants().
            </summary>
            <param name="localName">The localname to select.</param>
            <param name="nav">The XPathNavigator.</param>
            <returns>A new ArrayList of XPathNavigators.</returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.GetSortedChildren(System.Xml.XPath.XPathNavigator,System.String,System.String)">
            <summary>
            Returns a SortedList which links each child node's attribute value (sorted, of course)
            to an XPathNavigator pointing to that node. This selects child nodes
            based on node local name.  This just looks at immediate children, not
            all descendants.
            </summary>
            <remarks>
            Surprisingly, XPathNavigator.SelectChildren() apparently visits all
            descendants, despite the presence of XPathNavigator.SelectDescendants().
            </remarks>
            <param name="attrName">The attribute to sort on.</param>
            <param name="nav">The parent of the children to index.</param>
            <param name="localName">The localName of child nodes to select.</param>
            <returns>The SortedList of child node attribute values to 
            XPathNavigators.</returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.FixCodeNodes(System.Xml.XmlNode)">
            <summary>
            Fix code node such that it will be rendered correctly (using pre).
            </summary>
            <param name="topNode"></param>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.FixCodeNodes(System.Xml.XPath.XPathNavigator)">
            <summary>
            Fix code node such that it will be rendered correctly (using pre).
            </summary>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.GetNodeXmlFixCode(System.Xml.XPath.XPathNavigator)">
            <summary>
            Fix any code nodes under the specified navigator, and return the node's
            inner Xml. 
            </summary>
            <param name="nav"></param>
            <returns></returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.GetDescendantNodeWithName(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Return a new XPathNavigator pointing to the first descendant node
            with the specified name.
            </summary>
            <param name="nodeName">The node name string.</param>
            <param name="startNavigator">Initial node to start search from.</param>
            <returns>An XPathNavigator pointing to the specified descendant, or null
            for not found.</returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.GetChildNodeWithName(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Return a new XPathNavigator pointing to the first child node
            of the specified name.
            </summary>
            <param name="nodeName">The node name string.</param>
            <param name="startNavigator">Initial node to start search from.</param>
            <returns>An XPathNavigator pointing to the specified child, or null
            for not found.</returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.DumpNavTree(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            For debugging, display the node local names starting from
            a particular node.
            </summary>
            <param name="nav">The start point.</param>
            <param name="prefix">An indentation prefix for the display.</param>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.GetNamespaceHtmlId(System.String)">
            <summary>
            Turn a namespace name into an html id we can use for links.
            </summary>
            <param name="namespaceName"></param>
            <returns></returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.GetTypeHtmlId(System.String)">
            <summary>
            Turn a type name into an html id we can use for links.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.NamespaceLinkReferenceWrap(System.String)">
            <summary>
            Create a string which wraps the input string to make it a link
            to the specified namespace.
            </summary>
            <param name="namespaceName">The string to wrap.</param>
            <returns>The wrapped string.</returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.TypeLinkReferenceWrap(System.String)">
            <summary>
            Create a string which wraps the input string to make it a link
            to the specified type.
            </summary>
            <param name="typeName">The string to wrap.</param>
            <returns>The wrapped string.</returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.TypeRefWrap(System.String)">
            <summary>
            Create a string which wraps the input string with a span tag
            with a particular html class attribute.
            </summary>
            <param name="s">The string to wrap.</param>
            <returns>The wrapped string.</returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.KeyWrap(System.String)">
            <summary>
            Create a string which wraps the input string with a span tag
            with a particular html class attribute.
            </summary>
            <param name="s">The string to wrap.</param>
            <returns>The wrapped string.</returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.StartTable(System.Xml.XmlTextWriter,System.String,System.Int32,System.String[])">
            <summary>
            Write the starting tags for a table to the specified writer.
            </summary>
            <param name="xtw"></param>
            <param name="id">The table id to put in the html.</param>
            <param name="width">The width (pixels) of the table.</param>
            <param name="columnNames">An array of column names to use
            in the header row. This also sets the number of columns.</param>
            <returns>bool - true</returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.AddTableEntry(System.Xml.XmlTextWriter,System.Object[])">
            <summary>
            Write a table entry (one row) consisting of one or more columns
            of text.
            </summary>
            <param name="xtw"></param>
            <param name="args">The strings to write.</param>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.AddTableEntryRaw(System.Xml.XmlTextWriter,System.Object[])">
            <summary>
            Write a table entry (one row) consisting of one or more columns
            of text, written Raw.
            </summary>
            <param name="xtw"></param>
            <param name="args">The strings to write.</param>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.EndTable(System.Xml.XmlTextWriter)">
            <summary>
            End a table. This is provided for symmetry, and in case there's
            something else I have to write in tables in the future.
            </summary>
            <param name="xtw"></param>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.MakeHtml(System.String)">
            <summary>
            Build and emit the html document from the loaded NDoc Xml document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.MakeHtmlForAssembly(System.Xml.XPath.XPathNavigator)">
            <summary>
            Do the build operations given that the specified XPathNavigator is pointing to
            an assembly node.
            </summary>
            <param name="nav">The XPathNavigator pointing to a node of type
            appropriate for this method.</param>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.MakeHtmlForModule(System.Xml.XPath.XPathNavigator,System.String,System.String)">
            <summary>
            Do the build operations given that the specified <see cref="T:System.Xml.XPath.XPathNavigator"/> 
            is pointing to a module node.
            </summary>
            <param name="nav">The <see cref="T:System.Xml.XPath.XPathNavigator"/> pointing to a 
            node of a type that's appropriate for this method.</param>
            <param name="assemblyName">The name of the assembly containing the module.</param>
            <param name="assemblyVersion">The version of the assembly containing the module.</param>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.MakeHtmlForNamespace(System.Xml.XPath.XPathNavigator,System.String,System.String)">
            <summary>
            Do the build operations given that the specified <see cref="T:System.Xml.XPath.XPathNavigator"/> 
            is pointing to a namespace node.
            </summary>
            <param name="nav">The <see cref="T:System.Xml.XPath.XPathNavigator"/> pointing to a 
            node of a type that's appropriate for this method.</param>
            <param name="assemblyName">The name of the assembly containing this namespace.</param>
            <param name="assemblyVersion">The version of the assembly containing this namespace.</param>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.MakeHtmlTypeList(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Write some html containing the list of types in this namespace.
            </summary>
            <param name="nav"></param>
            <param name="namespaceName"></param>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.TypeMatchesIncludeRegexp(System.Xml.XPath.XPathNavigator)">
            <summary>
            This checks whether the Type represented by the specified node
            matches the include type regexp.
            </summary>
            <param name="nav">The XPathNavigator pointing to the type node.</param>
            <returns>bool - true for should be included, false for should be
            excluded.</returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.MakeHtmlForType(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Builds html for a Type.  An Type here is a class, struct, interface, etc.
            </summary>
            <param name="nav">The XPathNavigator pointing to the type node.</param>
            <param name="namespaceName">The namespace containing this type.</param>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.MakeHtmlForTypeUsingXslt(System.Xml.XPath.XPathNavigator,System.Xml.XmlTextWriter,System.String)">
            <summary>
            Use Xslt transform to document this type.
            </summary>
            <param name="nav"></param>
            <param name="xtw"></param>
            <param name="namespaceName"></param>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.MakeHtmlForTypeUsingCs(System.Xml.XPath.XPathNavigator,System.Xml.XmlTextWriter,System.String)">
            <summary>
            Document the current node's type using C#.
            </summary>
            <param name="nav"></param>
            <param name="xtw"></param>
            <param name="namespaceName"></param>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.MakeHtmlForTypeMember(System.String,System.String,System.Xml.XPath.XPathNavigator,System.Xml.XmlTextWriter)">
            <summary>
            Make (and write) html for a Type (class, interface, ...) member, such
            as a property, field, etc.
            </summary>
            <param name="parentTypeName">The Type's name.</param>
            <param name="memberType">The type of the member (property, field, 
            method, etc)</param>
            <param name="nav">Pointing to the member's node.</param>
            <param name="xtw"></param>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.MakeHtmlDetailsForMethod(System.String,System.String,System.Xml.XPath.XPathNavigator,System.Xml.XmlTextWriter)">
            <summary>
            Write html for a single method.
            </summary>
            <param name="parentTypeName"></param>
            <param name="memberType"></param>
            <param name="nav"></param>
            <param name="xtw"></param>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.MakeHtmlForMethodParameterDetails(System.Xml.XPath.XPathNavigator,System.Xml.XmlTextWriter)">
            <summary>
            Write a parameter list to the specified writer.
            </summary>
            <param name="nav"><see cref="T:System.Xml.XPath.XPathNavigator"/> to the method's node.</param>
            <param name="xtw">The <see cref="T:System.Xml.XmlTextWriter"/> to write the parameter list to.</param>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.MakeMethodDeclaration(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Make a string for a method (including constructor) declaration, such as 
            "public bool Foo(int x, int y, string s)".
            </summary>
            <param name="nav">Navigator to the Method's node.</param>
            <param name="parentTypeName">The name of the Type which contains this
            method.</param>
            <returns>The declaration string.</returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.MakeMethodParametersString(System.Xml.XPath.XPathNavigator)">
            <summary>
            Make a string for a method's parameter list, such as 
            "int x, int y, string s".
            </summary>
            <param name="nav">Navigator to the Method's node.</param>
            <returns>The param list string.</returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.MakeHtmlTypeDeclaration(System.Xml.XPath.XPathNavigator)">
            <summary>
            Make a string for a Type declaration, such as 
            "public class Foo : IComparable".
            </summary>
            <param name="nav">Navigator to the Type's node.</param>
            <returns>The declaration string.</returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.EmitHtml(System.String)">
            <summary>
            This writes the html corresponding to the xml we've already
            internalized.
            </summary>
            <param name="fileName">The name of the file to write to.</param>
            <returns></returns>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="P:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.MyConfig">
            <summary>Cast to my type.</summary>
        </member>
        <member name="P:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.DevelopmentStatus">
            <summary>
            The development status (alpha, beta, stable) of this documenter.
            Documenters should override this if they aren't stable.
            </summary>
        </member>
        <member name="P:NDoc.Documenter.LinearHtml.LinearHtmlDocumenter.MainOutputFile">
            <summary>See <see cref="T:NDoc.Core.IDocumenter"/>.</summary>
        </member>
        <member name="T:NDoc.Documenter.LinearHtml.LinearHtmlDocumenterConfig">
            <summary>The LinearHtmlDocumenterConfig class.</summary>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlDocumenterConfig.#ctor">
            <summary>Initializes a new instance of the MsdnHelpConfig class.</summary>
            <remarks>
            <para>The LinearHTML Documenter creates a single HTML file that includes
            all of the types and members in your project.</para>
            </remarks>
        </member>
        <member name="P:NDoc.Documenter.LinearHtml.LinearHtmlDocumenterConfig.IncludeTypeMemberDetails">
            <summary>Gets or sets the IncludeTypeMemberDetails property.</summary>
            <remarks>Whether or not to put type member (methods, fields, properties, ...) details into the 
            document.  For fields and properties this means whether or not to include 
            remarks in the table.  For methods this means whether or not to break out 
            method details (such as parameters) into separate sub-sections.</remarks>
        </member>
        <member name="P:NDoc.Documenter.LinearHtml.LinearHtmlDocumenterConfig.OutputDirectory">
            <summary>Gets or sets the OutputDirectory property.</summary>
            <remarks>The directory in which the .html file will be generated.</remarks>
        </member>
        <member name="P:NDoc.Documenter.LinearHtml.LinearHtmlDocumenterConfig.MethodParametersInTable">
            <summary>Gets or sets the MethodParametersInTable property.</summary>
            <remarks>Whether or not to put method parameter lists 
            into the same table with the method name.</remarks>
        </member>
        <member name="P:NDoc.Documenter.LinearHtml.LinearHtmlDocumenterConfig.TypeIncludeRegexp">
            <summary>Gets or sets the TypeIncludeRegexp property.</summary>
            <remarks>A C# regular expression to include types.  If this is specified,
             only types which match will be included in the output.</remarks>
        </member>
        <member name="P:NDoc.Documenter.LinearHtml.LinearHtmlDocumenterConfig.NamespaceExcludeRegexp">
            <summary>Gets or sets the NamespaceExcludeRegexp property.</summary>
            <remarks>A C# regular expression to exclude namespaces.</remarks>
        </member>
        <member name="P:NDoc.Documenter.LinearHtml.LinearHtmlDocumenterConfig.Title">
            <summary>Gets or sets the Title property.</summary>
            <remarks>This is the title displayed at the top of every page.</remarks>
        </member>
        <member name="P:NDoc.Documenter.LinearHtml.LinearHtmlDocumenterConfig.IncludeHierarchy">
            <summary>Gets or sets the IncludeHierarchy property.</summary>
            <remarks>To include a class hiararchy page for each namespace. 
            Don't turn it on if your project has a namespace with many types, 
            as NDoc will become very slow and might crash.</remarks>
        </member>
        <member name="P:NDoc.Documenter.LinearHtml.LinearHtmlDocumenterConfig.SortTOCByNamespace">
            <summary>Gets or sets the SortTOCByNamespace property.</summary>
            <remarks>Sorts the TOC by namespace name. SplitTOCs is disabled 
            when this option is selected.</remarks>
        </member>
        <member name="P:NDoc.Documenter.LinearHtml.LinearHtmlDocumenterConfig.HeaderHtml">
            <summary>Gets or sets the HeaderHtml property.</summary>
            <remarks>Raw HTML that is used as a page header instead of the default blue banner. 
            "%FILE_NAME%" is dynamically replaced by the name of the file for the current html page. 
            "%TOPIC_TITLE%" is dynamically replaced by the title of the current page.</remarks>
        </member>
        <member name="P:NDoc.Documenter.LinearHtml.LinearHtmlDocumenterConfig.FooterHtml">
            <summary>Gets or sets the FooterHtml property.</summary>
            <remarks>Raw HTML that is used as a page footer instead of the default footer.
            "%FILE_NAME%\" is dynamically replaced by the name of the file for the current html page. 
            "%ASSEMBLY_NAME%\" is dynamically replaced by the name of the assembly for the current page. 
            "%ASSEMBLY_VERSION%\" is dynamically replaced by the version of the assembly for the current page. 
            "%TOPIC_TITLE%\" is dynamically replaced by the title of the current page.</remarks>
        </member>
        <member name="P:NDoc.Documenter.LinearHtml.LinearHtmlDocumenterConfig.FilesToInclude">
            <summary>Gets or sets the FilesToInclude property.</summary>
            <remarks>Specifies external files that must be included 
            in the compiled CHM file. Multiple files must be separated by a pipe ('|').</remarks>
        </member>
        <member name="T:NDoc.Documenter.LinearHtml.LinearHtmlWorkspace">
            <summary>
            Summary description for LatexWorkspace.
            </summary>
        </member>
        <member name="M:NDoc.Documenter.LinearHtml.LinearHtmlWorkspace.#ctor(System.String)">
            <summary>
            Manages the location of the documentation build process
            </summary>
            <param name="rootDir">The location to create the workspace</param>
        </member>
    </members>
</doc>
